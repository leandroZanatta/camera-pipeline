[build-system]
requires = [
    "setuptools>=42",
    "wheel",
    "scikit-build-core>=0.8",
]
build-backend = "scikit_build_core.build"

[project]
name = "camera-pipeline-processor"
version = "0.1.0"
description = "A camera pipeline processor for video processing."
authors = [
    { name="Leandro Zanatta", email="leandro@example.com" }
]
license = "MIT"
readme = "README.md"
requires-python = ">=3.8"

dependencies = [
    "opencv-python==4.11.0.86"
]

[project.urls]
"Homepage" = "https://github.com/leandroZanatta/camera-pipeline"

[project.optional-dependencies]
numpy = ["numpy>=1.26.4"]
ui = ["PySide6>=6.5.0"]
dev = ["pytest>=7.4.2", "black>=23.9.1"]
full = ["numpy>=1.26.4", "PySide6>=6.5.0", "pytest>=7.4.2", "black>=23.9.1"]

[tool.scikit-build]
# Definir explicitamente a versão mínima do CMake
cmake.minimum-required = "3.15"
# Configurações específicas do CMake
cmake.source-dir = "c_src"
cmake.build-type = "Release"

# Configurações da Wheel
# Mapeia o diretório de instalação do CMake para a raiz da wheel.
# O CMakeLists.txt deve instalar em 'camera_pipeline/core' para que caia no lugar certo.
wheel.install-dir = ""

# Garantir que os pacotes Python sejam incluídos
# Descoberta automática deve funcionar, mas podemos ser explícitos:
# wheel.packages = ["camera_pipeline"]

# Controla se binários na wheel são "stripped" (removidos símbolos de debug)
#wheel.strip = False 