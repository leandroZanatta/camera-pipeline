[build-system]
requires = [
    "setuptools>=42",
    "wheel",
    "scikit-build-core>=0.8",
    "cmake>=3.15",
    "ninja"
]
build-backend = "scikit_build_core.build"

[project]
name = "camera-pipeline-processor"
version = "0.1.0"
description = "A camera pipeline processor for video processing."
authors = [
    { name="Leandro Zanatta", email="leandro@example.com" }
]
license = "MIT"
readme = "README.md"
requires-python = ">=3.8"

dependencies = [
    "opencv-python==4.11.0.86"
]

[project.urls]
"Homepage" = "https://github.com/leandroZanatta/camera-pipeline"

[project.optional-dependencies]
numpy = ["numpy>=1.26.4"]
ui = ["PySide6>=6.5.0"]
dev = ["pytest>=7.4.2", "black>=23.9.1"]
full = ["numpy>=1.26.4", "PySide6>=6.5.0", "pytest>=7.4.2", "black>=23.9.1"]

[tool.scikit-build]
# Diretório do CMakeLists.txt relativo a este arquivo
cmake-source-dir = "c_src"
# Mapeia o diretório de instalação do CMake para dentro da wheel
# Tudo que o CMake instalar será colocado aqui.
wheel-install-dir = "camera_pipeline/core"
# Tentar descoberta automática de pacotes python primeiro
# Se falhar, descomentar a linha abaixo:
# packages = ["camera_pipeline"]
# Opcional: passar args para CMake
# cmake-args = ["-DEXAMPLE_OPTION=ON"] # Note a mudança para hífens aqui também
# Opcional: definir targets CMake específicos para construir
# cmake-targets = ["camera_pipeline_c"] # Note a mudança para hífens aqui também
# Configuração de build (ex: Release, Debug)
cmake-build-type = "Release"
# Controla se binários na wheel são "stripped"
wheel-strip = False # Manter símbolos de debug por enquanto 